/* This software is for education purpose only*/

package ads2_image_cic;

/** @author Jing Wang */

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.*;


public class gui extends javax.swing.JFrame {
    File[] files;//Files from image database
    BufferedImage[] images;//image containers of all images
    JList list;//JList object for display images in the GUI    
    
    final int imgW = 200;//width of displayed images (unit: pixels) 
    final int imgH = 200;//height of displayed images (unit: pixels)
    
    /* A graph data structure represents similarities of all the images. The 
     * graph will be used for MST-based classification algorithms 
     */
    //private int graphSize = 12; //110  or  12
    ImgGraph distanceNetwork;
    
    
    /* Initialisation before running the program*/
    public gui() {
        initComponents();
        DBPath.setText(">>> Please choose an image database");
        imgClassification.setEnabled(false); 
        ProgressBar.setMinimum(0);
        ProgressBar.setValue(0);
        indicator.setText("");        
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageDisplay = new javax.swing.JDialog();
        display = new javax.swing.JLabel();
        LoadDB = new javax.swing.JButton();
        DBPath = new javax.swing.JLabel();
        Separator1 = new javax.swing.JSeparator();
        TabPanel = new javax.swing.JTabbedPane();
        imgClassification = new javax.swing.JButton();
        ProgressBar = new javax.swing.JProgressBar();
        indicator = new javax.swing.JLabel();

        imageDisplay.setMinimumSize(new java.awt.Dimension(400, 300));

        javax.swing.GroupLayout imageDisplayLayout = new javax.swing.GroupLayout(imageDisplay.getContentPane());
        imageDisplay.getContentPane().setLayout(imageDisplayLayout);
        imageDisplayLayout.setHorizontalGroup(
            imageDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(display, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        imageDisplayLayout.setVerticalGroup(
            imageDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(display, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Colour-based Image Classification (SHU)");
        setMinimumSize(new java.awt.Dimension(100, 100));

        LoadDB.setText("Load Database");
        LoadDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadDBActionPerformed(evt);
            }
        });

        DBPath.setText("<path>");
        DBPath.setMaximumSize(new java.awt.Dimension(637, 26));

        imgClassification.setText("Image Classification >");
        imgClassification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgClassificationActionPerformed(evt);
            }
        });

        indicator.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(imgClassification)
                        .addGap(18, 18, 18)
                        .addComponent(indicator, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(LoadDB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DBPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Separator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TabPanel))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoadDB)
                    .addComponent(DBPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Separator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(TabPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imgClassification)
                    .addComponent(indicator))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* This function contains file operations and image GUI display when you 
     * press "Load Database" button. The tasks are:
     * 1. Open a file dialog and let users to choose the path of the database;
     * 2. Import all the image files by using methods ImgFiles class; 
     * 3. Create a tab for displaying all the images in the database;
     * 4. List all the images in a display list. User can use a scroll bar to view
     *    the all the images.
     * 
     * If you are not familiar with Java Swing controls and containers, 
     * please do not modify the code.
     *
     * After running this function. The global variable “images” should have 
     * been defined. You can use the array index number as the ID of each image 
     * and use these IDs as vertices to build the underlaying image distance graph.
     */
    private void LoadDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadDBActionPerformed
        /* Load all the files from selected folder */
        
        ImgFiles fileRef = new ImgFiles();        
        files = fileRef.ListFiles();//Open file dialog and get files 
        
        /* Images are displayed if users click "open", and the selected folder 
         * contains at least one image. */
        if (files!=null && files.length!=0){
            
            imgClassification.setEnabled(true);//Classification is allowed after loading the image dataset
            DBPath.setText(files[0].getParent());//Display path of image database
            ImgFiles.PrintAllFilesNames(files);//Print image file name in the console
            indicator.setText("");//Clean the message for the new database
            
            /* Save and display all the images in GUI*/
            images = new BufferedImage[files.length];
            distanceNetwork = new ImgGraph(images.length);
            DefaultListModel listModel = new DefaultListModel();//Use JList to display images in GUI          
            allImageList(listModel, imgW, imgH);//Save images and setup images to listModel
            list = new JList(listModel);//Create a list from listModel
            listSetup();            
            JScrollPane listScrollPane = new JScrollPane(list);//warp the list with a scroll
            if(TabPanel.getTabCount()!= 0)
                TabPanel.removeAll();//Refresh the images if users choose another database                
            TabPanel.add(listScrollPane,"Image View");            
        }
        else {
            DBPath.setText("This folder has no image.");
            imgClassification.setEnabled(false);
        }
        
 
    }//GEN-LAST:event_LoadDBActionPerformed
    
    /* This function runs image processing, image comparing, and classification 
     * algorithms when users click the “Image Classification” button. You need 
     * to apply suitable data structures and algorithms to automatically classify 
     * images into several groups (clusters) based on their visual similarity
     *
     * To run this skeleton code without errors, the software have simulated some random outputs. 
     * After fully developing the data structure and algorithms, this simulation 
     * can be replaced. 
     */
     
    private void imgClassificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgClassificationActionPerformed
        /* GUI Setup: Buttons and progress bar */
        imgClassification.setEnabled(false); 
        ProgressBar.setValue(0);
        ProgressBar.setMaximum(images.length-1);
        
        /*A new thread can update progress bars while running other functions.*/
        new Thread(() -> {            
            /* The classification outputs should be represented in a 2D array with all 
             * the different clusters stored in the 1st dimension, and members of 
             * each cluster in the 2nd dimension. The GUI will use this 2D array 
             * to display the classification output in the GUI.  The tabs represent 
             * different clusters and images displayed in each cluster should look 
             * similar to each other.*/
            int[][] clustersIDs;
            float distance;
            /*
            
            for (int k = 0; k < images.length * images.length; ++k) {
                int i = k / images.length;
                int j = (k % images.length);
                
                if (!((j == 0) || (j > images.length)))
                
                distance = ImgProcessing.Compare(images[v],images[j]);//Similarity between image i and j
                indicator.setText("image"+v+"<---"+distance+"--->image"+j);//Display the measurement in GUI
                System.out.println("image"+v+"<---"+distance+"--->image"+j);//Display the measurement in console
                distanceNetwork.AddNodesEdges(v, j, distance);//Add the i, j and their distance to the graph
                ProgressBar.setValue(v);// Update progress bar
                
                if (j < images.length-1)
                {
                    j++;
                }
                else
                {
                    j = 0;
                    v++;
                }
            }
            
            */
            
            for (int i=0; i<images.length; i++){
                for (int j=i+1; j<images.length; j++)
                {
                    distance = ImgProcessing.Compare(images[i],images[j]);//Similarity between image i and j
                    indicator.setText("image"+i+"<---"+distance+"--->image"+j);//Display the measurement in GUI
                    System.out.println("image"+i+"<---"+distance+"--->image"+j);//Display the measurement in console
                    distanceNetwork.AddNodesEdges(i, j, distance);//Add the i, j and their distance to the graph
                }
            ProgressBar.setValue(i);// Update progress bar
            }
            
            ImgTree MST = distanceNetwork.GetMST();//Get minimum spanning tree from graph
            ImgTree[] clusters = ImgTree.MSTSegmentation(MST);//Get sub-trees from MST as clusters
            
            //int numOfClusters = 10;//Number of clusters (initial value is 10)
            int numOfClusters = clusters.length;
            //lenght = clusters.lenght; //The actual number of clusters is defined by the number of sub-trees
            clustersIDs = new int[numOfClusters][];//Define the 1st dimension
            ImgTree graph = null;
            for (int i=0; i<numOfClusters; i++){
                graph = clusters[i];
                
                /* Use ImgTree.getAllNodesIDs(graph) to replace the following line
                 * after fully developing your algorithm */
                //clustersIDs[i]=ImgTree.getAllNodesIDsDEMO(graph);//Define the 2nd dimension
                clustersIDs[i]=ImgTree.getAllNodesIDs(graph);//Define the 2nd dimension
            } 
            
            
            //System.out.println(clustersIDs[0][1]);
            /*Display the results in GUI*/
            displayClusters(clustersIDs);           
            imgClassification.setEnabled(true);
            indicator.setText("Done! We have "+numOfClusters+" clusters.");
        }).start();
         
    }//GEN-LAST:event_imgClassificationActionPerformed
    
    /*Do not modify main function*/   
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DBPath;
    private javax.swing.JButton LoadDB;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JSeparator Separator1;
    private javax.swing.JTabbedPane TabPanel;
    private javax.swing.JLabel display;
    private javax.swing.JDialog imageDisplay;
    private javax.swing.JButton imgClassification;
    private javax.swing.JLabel indicator;
    // End of variables declaration//GEN-END:variables

    /* JList GUI setup - Do not modify */
    private void listSetup() {
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setLayoutOrientation(JList.HORIZONTAL_WRAP);
        list.setSelectedIndex(-1);
        list.setVisibleRowCount(-1);
    }

    /* JList imgae display setup - Do not modify */
    private void allImageList(DefaultListModel listModel, int imgWidth, int imgHeight) {
        
        ProgressBar.setValue(0);
        ProgressBar.setMaximum(files.length-1);
        
        new Thread (() -> {
            for (int i=0; i<files.length; i++){
                //Image display
                ImageIcon Icon_temp = new ImageIcon(files[i].getAbsolutePath());
                Image img_temp = Icon_temp.getImage();
                ImageIcon img = new ImageIcon(img_temp.getScaledInstance(imgWidth, imgHeight, Image.SCALE_SMOOTH));
                listModel.addElement(img);
                
                //Image Processing
                images[i] = ImgFiles.ImgFromPath(files[i]);
                               
                //Progress Bar
                ProgressBar.setValue(i);                
            }            
        }).start();
    }

    /* Display classification results in GUI - Do not modify */
    private void displayClusters(int[][] clustersIDs) {
        int NumOfClusters = clustersIDs.length;
        
        //Clean old tags for new outputs (refresh)
        if(TabPanel.getTabCount()!= 1)//We only need "Image View" tag
            for (int i=0; i<NumOfClusters; i++)
                TabPanel.remove(1);
        
        
        for (int i=0; i<NumOfClusters; i++) {
            DefaultListModel listClusterModel = new DefaultListModel();
            for (int j=0; j<clustersIDs[i].length;j++){
                Image img_temp = images[clustersIDs[i][j]];
                ImageIcon img = new ImageIcon(img_temp.getScaledInstance(imgW, imgH, Image.SCALE_SMOOTH));
                listClusterModel.addElement(img);
            }
            list = new JList(listClusterModel);//Create a list from listModel
            listSetup();            
            JScrollPane listScrollPane = new JScrollPane(list);//warp the list with a scroll
                        
            TabPanel.add(listScrollPane,"Cluster "+(i+1)); 
        }
    }
    
           
}


